//@author: a0111642w



	/**
	 * origin: C:\Users\User\Desktop\TaskSotong\main\Parser\paraList.cpp
	 */

#include "paraList.h"
#include <assert.h>
#include <iostream>
using namespace std;

paraList::paraList()
{}

void paraList::setparaList(string command1, int deleteNumber1, int displayNumber1, int updateNumber1, string keyword1, string input1, Task task1){
	_command = command1;
	deleteNumber = deleteNumber1;
	displayNumber = displayNumber1;
	updateNumber = updateNumber1;
	keyword = keyword1;
	input = input1;
	_task = task1;


	return;
}

Task paraList::getTask()
{
	return _task;
}

int paraList::getDeleteInteger()
{

	return deleteNumber;

}

int paraList::getDisplayInteger()
{
	return displayNumber;
}

int paraList::getUpdateInteger()
{

	return updateNumber;
}


string paraList::getCommand()
{
	return _command;
}


void paraList::processCommand(string inputCommand)
{
	_command = inputCommand;
	return;
}

void paraList::processTask(string inputTask)
{
	return;
}
void paraList::processDeleteNumber(int index)
{
	try
	{
		deleteNumber = index;
		if (deleteNumber < 0)
		{
			throw;
		}

	}
	catch (...)
	{

		cout << "Exceptation Case:Delete Number <0";


	}





	
}

void paraList::processDisplayNumber(int index)
{
	


	try
	{
		displayNumber = index;
		if (displayNumber < 0)
		{
			throw;
		}

	}
	catch (...)
	{

		cout << "Exceptation Case:Display Number <0";


	}


}

void paraList::processUpdateNumber(int index)
{

	try
	{
		updateNumber = index;
		if (updateNumber < 0)
		{
			throw;
		}

	}
	catch (...)
	{

		cout << "Exceptation Case:update Number <0";


	}







	
}

void paraList::clearAllNumber()
{
	deleteNumber = NULL;
	displayNumber = NULL;
	updateNumber = NULL;
}

void paraList::processKeyWord(string a)
{
	keyword = a;
	return;
}

void paraList::processInput(string b)
{
	input = b;
	return;
}

string paraList::getKeyword()
{
	return keyword;
}

string paraList::getInput()
{
	return input;

}

//changes all task parameters to empty string
void paraList::clearTask()
{
	_task.changeTaskDeadlineDate("");
	_task.changeTaskDeadlineTime("");
	_task.changeTaskEndDate("");
	_task.changeTaskEndTime("");
	_task.changeTaskStartDate("");
	_task.changeTaskStartTime("");
	_task.changeTaskName("");
	_task.changeTaskPriority("");
	_task.changeTaskStatus("");
	return;
}

void paraList::processMarkIndex(int index)
{

	try
	{
	
	markIndex = index;
	if (markIndex < 0)
	{
		throw;
	}
	
	}
	catch (...)
	{

		cout << "Exceptation Case:Mark index<0";


	}
	
	


	return;
}


void paraList::processMarkStatus(string keyword)
{

	markStatus = keyword;


	return;
}

void paraList::processUserDir(string directory)
{

	userDir = directory;

	return;
}

void paraList::processSearchWord(string keyWord)
{
	//assert(keyWord != "");
	searchKeyword = keyWord;

	return;
}


string paraList::getuserdir()
{
	return userDir;

}

string  paraList::getmarkstatus()
{
	
	return markStatus;

}

int paraList::getmarkindex()
{

	return markIndex;
}

string paraList::getSearchKey()
{
	return searchKeyword;
}


void paraList::processViewInc()
{

	viewIncompleted = true;

}
void paraList::processViewComp()
{
	viewCompleted = true;

}
bool paraList::getprocessViewInc()
{
	return viewIncompleted;

}
bool paraList::getprocessViewComp()
{
	return viewCompleted;


}
	// End of segment: C:\Users\User\Desktop\TaskSotong\main\Parser\paraList.cpp





	/**
	 * origin: C:\Users\User\Desktop\TaskSotong\main\Parser\paraList.h
	 */

#ifndef PARALIST_H
#define PARALIST_H

#include <vector>
#include <iostream>
#include <string>
#include "..\Common\Task.h"

using namespace std;

class paraList{

private:
	string _command;
	string keyword;
	string input;
	string markStatus;
	string userDir;
	string searchKeyword;
	bool viewIncompleted;
	bool viewCompleted;
    int deleteNumber;
	int displayNumber;
	int updateNumber;
	int markIndex;


public:
	paraList();
	//for unit testing purpose.

	Task _task;
	Task getTask();
	string getKeyword();
	string getInput();
	string getCommand();
	string getSearchKey();
	string getuserdir();
	string getmarkstatus();
	int getDeleteInteger();
	int getDisplayInteger();
	int getUpdateInteger();
	int getmarkindex();
	void setparaList(string, int, int, int, string, string, Task);
	void displayTaskName(string taskName);
	void processCommand(string inputCommand);
	void processTask(string inputTask);
	void processDeleteNumber(int index);
	void processDisplayNumber(int index);
	void processUpdateNumber(int index);
	void processKeyWord(string a);
	void processInput(string b);
	void processMarkIndex(int);
	void processMarkStatus(string);
	void processUserDir(string);
	void processSearchWord(string);
	void processViewInc();
	void processViewComp();
	void clearAllNumber();
	void clearTask();
	bool getprocessViewInc();
	bool getprocessViewComp();

};

#endif

	// End of segment: C:\Users\User\Desktop\TaskSotong\main\Parser\paraList.h





	/**
	 * origin: C:\Users\User\Desktop\TaskSotong\main\Parser\Parser.cpp
	 */

#include "Parser.h"
#include "paraList.h"
#include "parserProcess.h"
//#define NDEBUG
#include <assert.h>
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <sstream>
#include <regex>

using namespace std;
	// End of segment: C:\Users\User\Desktop\TaskSotong\main\Parser\Parser.cpp





	/**
	 * origin: C:\Users\User\Desktop\TaskSotong\main\Parser\Parser.cpp
	 */

Parser::Parser()
{}

//extracts the command from userInput
void Parser::sortCommand(string &userInput){

	int index;
	index = userInput.find_first_of(" ");
	string temp = userInput.substr(0, index);
	para.processCommand(temp);
	userInput.erase(0, index + 1);

	return;
}

//extracts the command parameters from userInput
void Parser::sortDetails(string &userInput)
{
	int index;
	string eventStartDetails;
	string eventEndDetails;
	keywordType Keyword;
	Keyword = determineKeywords(userInput);

	switch (Keyword){

	case ABST_NIL:
	{
		para._task.changeTaskName(userInput);

		return;
	}
	case NONE:
	{	
		
		int firstToken = PROCESS_INITIAL;
		int secondToken = PROCESS_INITIAL; 
		int thirdToken = PROCESS_INITIAL; 
		int process = 0;

		getNoneToken(userInput, firstToken, secondToken, thirdToken);
		processNum(firstToken, secondToken, thirdToken, process);
	
		processupdateNone(userInput,process);

		if (para._task.getTaskDeadlineDate() == "" && para._task.getTaskDeadlineTime() != ""){
			parserProcess now;
			para._task.changeTaskDeadlineDate(now.parserReturnNowTime());
		}

		return;
	}
	case STARTONLY:
	{
		string startTime; 
		string startDate;


		processX(userInput);
		processBeforeKeywordf(userInput);
		checkStart(startDate, startTime, userInput);
		para._task.changeTaskStartDate(startDate);
		para._task.changeTaskStartTime(startTime);

		if (para._task.getTaskStartDate() == "" && para._task.getTaskStartTime() != "")
		{
			parserProcess now;
			para._task.changeTaskStartDate(now.parserReturnNowTime());
		}

		return;
	}
	case ENDONLY:
	{   string endTime;
	    string endDate;
	
		processX(userInput);
		processBeforeKeywordt(userInput);
		checkEnd(endDate, endTime, userInput);
		para._task.changeTaskEndDate(endDate);
		para._task.changeTaskEndTime(endTime);

		if (para._task.getTaskEndDate() == "" && para._task.getTaskEndTime() != ""){
			parserProcess now;
			para._task.changeTaskEndDate(now.parserReturnNowTime());

		}

		return;
	}
	case DEADLINE:
	{
		string deadTime; 
		string deadDate;


		processX(userInput);
		processBeforeKeywordb(userInput);
		checkEnd(deadDate, deadTime, userInput);
		para._task.changeTaskDeadlineDate(deadDate);
		para._task.changeTaskDeadlineTime(deadTime);
	

		if (para._task.getTaskDeadlineDate() == "" && para._task.getTaskDeadlineTime() != ""){
			parserProcess now;
			para._task.changeTaskDeadlineDate(now.parserReturnNowTime());
		}

		return;
	}
	case START_END:
	{   
		index = userInput.find(":f") - 1;
		string tempName = userInput.substr(0, index);

		para._task.changeTaskName(userInput.substr(0, index));

		processBeforeKeywordf(userInput);
		index = userInput.find(":t") - 1;
		eventStartDetails = userInput.substr(0, index);
		userInput.erase(0, index + 4);

		eventEndDetails = userInput;

		processStartKey(eventStartDetails);
		processEndKey(eventEndDetails);

		return;
	}
	case FROM:
	{    
		string fromtime;
		string fromdate;

		processX(userInput);
		processKeywordFrom(userInput);
		checkStart(fromdate, fromtime, userInput);
		para._task.changeTaskStartDate(fromdate);
		para._task.changeTaskStartTime(fromtime);

	if (para._task.getTaskStartDate() == "" && para._task.getTaskStartTime() != ""){
		
		parserProcess now;
		para._task.changeTaskStartDate(now.parserReturnNowTime());

	}

	return;
	}
	case TO:
	{
		string endtime;
		string enddate;

		processX(userInput);
		processKeywordTo(userInput);
		checkStart(enddate, endtime, userInput);
		para._task.changeTaskEndDate(enddate);
		para._task.changeTaskEndTime(endtime);

		if (para._task.getTaskEndDate() == "" && para._task.getTaskEndTime() != ""){
			parserProcess now;
			para._task.changeTaskEndDate(now.parserReturnNowTime());
		}

		return;
	}
	case ON:
	{
		string ontime;
		string ondate;

		processX(userInput);
		processKeywordOn(userInput);
		checkStart(ondate, ontime, userInput);
		para._task.changeTaskStartDate(ondate);
		para._task.changeTaskStartTime(ontime);

		if (para._task.getTaskStartDate() == "" && para._task.getTaskStartTime() != ""){
			parserProcess now;
			para._task.changeTaskStartDate(now.parserReturnNowTime());
		}

		return;

	}
	case AT:
	{
		string attime;
		string atdate;

		processX(userInput);
		processKeywordAt(userInput);
		checkStart(atdate, attime, userInput);
		para._task.changeTaskStartDate(atdate);
		para._task.changeTaskStartTime(attime);

		if (para._task.getTaskStartDate() == "" && para._task.getTaskStartTime() != ""){
			parserProcess now;
			para._task.changeTaskStartDate(now.parserReturnNowTime());
		}

		return;

	}
	case BY:
	{
		string bytime;
		string bydate;

		processX(userInput);
		processKeywordBy(userInput);
		checkStart(bydate, bytime, userInput);
		para._task.changeTaskDeadlineDate(bydate);
		para._task.changeTaskDeadlineTime(bytime);

		if (para._task.getTaskDeadlineDate() == "" && para._task.getTaskDeadlineTime() != ""){
			parserProcess now;
			para._task.changeTaskDeadlineDate(now.parserReturnNowTime());
		}

		return;

	}
	case AFTER:
	{
		
		string afttime;
		string aftdate;

		processX(userInput);
		processKeywordAfter(userInput);

		checkStart(aftdate, afttime, userInput);
		para._task.changeTaskStartDate(aftdate);
		para._task.changeTaskStartTime(afttime);

		if (para._task.getTaskStartDate() == "" && para._task.getTaskStartTime() != ""){
			parserProcess now;
			para._task.changeTaskStartDate(now.parserReturnNowTime());
		}

		return;

	}
	case BEFORE:
	{
		string beftime;
		string befdate;

		processX(userInput);
		processKeywordBefore(userInput);
		checkStart(befdate, beftime, userInput);
		para._task.changeTaskDeadlineDate(befdate);
		para._task.changeTaskDeadlineTime(beftime);

		if (para._task.getTaskDeadlineDate() == "" && para._task.getTaskDeadlineTime() != ""){
			parserProcess now;
			para._task.changeTaskDeadlineDate(now.parserReturnNowTime());
		}

		return;
	}
	case FROM_TO:
	{
		string tempName;
		
		index = userInput.find("from") - 1;
		tempName = userInput.substr(0, index);

		para._task.changeTaskName(userInput.substr(0, index));

		processBeforeKeywordFrom(userInput);
		index = findToIndex(userInput)-1;
		eventStartDetails = userInput.substr(0, index);
		userInput.erase(0, index + 4);

		eventEndDetails = userInput;
		
		processStartKey(eventStartDetails);
		processEndKey(eventEndDetails);
		
		return;
	}
	}
	return;
}

paraList* Parser::parseCommand(string userInput){

	assert(userInput != "");

	para.clearTask();
	assertCommand(userInput);
	sortCommand(userInput);
	processCommand(userInput);

	return &para;
}

void Parser::processCommand(string &userInput){
	string command = para.getCommand();
	parserProcess a;
	int index;

	assertCommand(command);


	if (regex_search(command, ADD_PATTERN)){
		sortDetails(userInput);
		processDate();
		processTime();
	} else if (regex_search(command, DELETE_PATTERN)){
		istringstream iss(userInput);
		iss >> index;
		para.processDeleteNumber(index);
	} else if (regex_search(command, DISPLAY_PATTERN)){
		istringstream iss(userInput);
		iss >> index;
		para.processDisplayNumber(index);

	} else if (regex_search(command, UPDATE_PATTERN)){
		int b, index;
		string a;

		b = userInput.find_first_of(" ");
		a = userInput.substr(0, b);
		istringstream iss(a);
		iss >> index;
		userInput.erase(0, b + 1);
		b = userInput.find_first_of(" ");
		para.processKeyWord(userInput.substr(0, b));
		userInput.erase(0, b + 1);
		para.processInput(userInput);
		para.processUpdateNumber(index);

		processUpdateKeywords();
		convertKeywordTime(para.getInput(),para.getKeyword());

	} else if (regex_search(command, MARK_PATTERN)){
		istringstream iss(userInput);
		iss >> index;
		para.processMarkIndex(index);
		para.processMarkStatus("mark");

	} else if (regex_search(command, UNMARK_PATTERN)){
		istringstream iss(userInput);
		iss >> index;
		para.processMarkIndex(index);
		para.processMarkStatus("unmark");

	} else if (regex_search(command, UNMARK_PATTERN)){
		para.processUserDir(userInput);

	} else if (regex_search(command, SEARCH_PATTERN)){
		para.processSearchWord(userInput);

	} else if (regex_search(command, SAVE_PATTERN)){
		para.processUserDir(userInput);

	} else if (regex_search(command, VIEW_C_PATTERN)){

	} else if (regex_search(command, VIEW_I_PATTERN)){

	} else if (regex_search(command, VIEW_PATTERN))	{

	} else {
		command == "invalid";

	}

	return;
}

void Parser::processBeforeKeywordf(string &userInput){
	int index;

	index = userInput.find(":f") - 1;
	para._task.changeTaskName(userInput.substr(0, index));
	userInput.erase(0, index + 4);

	return;
}

void Parser::processBeforeKeywordt(string &userInput){
	int index;
	index = userInput.find(":t") - 1;
	para._task.changeTaskName(userInput.substr(0, index));
	userInput.erase(0, index + 4);

	return;
}

void Parser::processBeforeKeywordb(string &userInput){
	int index;
	index = userInput.find(":b") - 1;
	para._task.changeTaskName(userInput.substr(0, index));
	userInput.erase(0, index + 4);

	return;
}

string Parser::checkingKeywordX(string &userInput){
	string details;

	if (userInput.find("!") != string::npos){
		int index = userInput.find("!") - 1;
		details = userInput.substr(0, index);
		userInput.erase(0, index + 2);
		para._task.changeTaskPriority(userInput);
	} else {
		details = userInput;
	}

	return details;
}

Parser::keywordType Parser::determineKeywords(string userInput){

	string command = para.getCommand();

	if (command.find("#") != string::npos){
		para.processCommand(command.substr(0, 3));
		
		return ABST_NIL;
	} else if (!regex_search(userInput, EXP_PATTERN)){

		return NONE;

	} else if (regex_search(userInput, FROM_PATTERN) && regex_search(userInput, TO_PATTERN)){
		
		return FROM_TO;

	} else if (regex_search(userInput, F_PATTERN) && !regex_search(userInput, T_PATTERN)){
		
		return STARTONLY;

	} else if (!regex_search(userInput, F_PATTERN) && regex_search(userInput, T_PATTERN)){
		
		return ENDONLY;

	} else if (regex_search(userInput, BY_PATTERN)){

		return DEADLINE;
	
	} else if (regex_search(userInput, NTRL_FROM_PATTERN)){
		
		return FROM;

	} else if (regex_search(userInput, NTRL_BEFORE_PATTERN)){
		
		return BEFORE;

	} else if (regex_search(userInput, NTRL_AFTER_PATTERN)){
		
		return AFTER;

	} else if (regex_search(userInput, NTRL_TO_PATTERN)){
		
		return TO;

	} else if (regex_search(userInput, NTRL_BY_PATTERN)){
		
		return BY;

	} else if (regex_search(userInput, NTRL_ON_PATTERN)){
		
		return ON;

	} else if (regex_search(userInput, NTRL_AT_PATTERN)){
		
		return AT;

	} else {
		
		return  START_END;
	}
}

void Parser::checkStart(string&startdate, string &starttime, string userinput){
	
	startdate = checkSD(userinput);
	starttime = checkST(userinput);

	return;
}

string Parser::checkST(string userinput){
	string  date[50], time[50];
	int count1 = 0, count2 = 0;

	time[0] = "";

	const sregex_token_iterator d;
	for (sregex_token_iterator e(userinput.begin(), userinput.end(), TIME_PATTERN); e != d; ++e){

		time[count2] = *e;
		count2++;
	}

	return time[0];
}

string Parser::checkSD(string userinput){

	string  date[50], time[50];
	int count1 = 0, count2 = 0;

	date[0] = "";

	const sregex_token_iterator end;
	for (sregex_token_iterator i(userinput.begin(), userinput.end(), DATE_PATTERN); i != end; ++i){

		date[count1] = *i;
		count1++;
	}

	return date[0];
}

void Parser::checkEnd(string&enddate, string &endtime, string userinput){

	enddate = checkSD(userinput);
	endtime = checkST(userinput);

	return;
}

void Parser::processX(string userinput){

	string  keyword[50];
	int  count = 0;

	smatch X;
	const sregex_token_iterator d;
	for (sregex_token_iterator e(userinput.begin(), userinput.end(), X_PATTERN); e != d; ++e){

		keyword[count] = *e;
		count++;
	}
	
	if (regex_search(userinput, X, X_PATTERN))
		para._task.changeTaskPriority(keyword[0].substr(1));

	return;
}

void Parser::getNoneToken(string userinput, int& xtoken, int& timetoken, int& datetoken){

	smatch matchX;
	smatch matchdate;
	smatch matchtime;

	if (regex_search(userinput, matchX, X_PATTERN))
		xtoken = matchX.position(0);
	if (regex_search(userinput, matchdate, DATE_PATTERN))
		datetoken = matchdate.position(0);
	if (regex_search(userinput, matchtime, TIME_PATTERN))
		timetoken = matchtime.position(0);

	return;
}

void Parser::processNum(int& a, int& b, int& c, int& answer){

	if (a < b){
		if (c < a){
			answer = c;
		} else {
			answer = a;
		}
	} else {
		if (c < b){
			answer = c;
		} else {
			answer = b;
		}
	}

	return;
}

void Parser::processDate(){
	parserProcess end;
	parserProcess start;
	parserProcess deadline;

	string startStr = para._task.getTaskStartDate();
	string endStr = para._task.getTaskEndDate();
	string deadlineStr = para._task.getTaskDeadlineDate();
	
	if (startStr != ""){
		
		start.setNowDT();
		start.processDate(startStr);
		para._task.changeTaskStartDate(start.parserReturnDate());

	}

	if (endStr != ""){
		
		end.setNowDT();
		end.processDate(endStr);
		para._task.changeTaskEndDate(end.parserReturnDate());
	}

	if (deadlineStr != ""){
		
		deadline.setNowDT();
		deadline.processDate(deadlineStr);
		para._task.changeTaskDeadlineDate(deadline.parserReturnDate());
	}

	return;
}

void Parser::processKeywordFrom(string &userInput){
	int token;
	smatch matchx;

	regex_search(userInput, matchx, NTRL_FROM_PATTERN);

	token = matchx.position(0);

	para._task.changeTaskName(userInput.substr(0, token));
	userInput.erase(0, token + 5);

	return;
}

void Parser::processKeywordTo(string &userInput){
	int token;
	smatch matchx;

	regex_search(userInput, matchx, NTRL_TO_PATTERN);

	token = matchx.position(0);

	para._task.changeTaskName(userInput.substr(0, token));
	userInput.erase(0, token + 3);

	return;
}

void Parser::processKeywordBy(string &userInput){
	int token;
	smatch matchx;

	regex_search(userInput, matchx, NTRL_BY_PATTERN);

	token = matchx.position(0);
	cout << "token: " << token << endl;

	para._task.changeTaskName(userInput.substr(0, token));
	userInput.erase(0, token + 3);

	return;
}

void Parser::processKeywordAt(string &userInput){
	int token;
	smatch matchx;

	regex_search(userInput, matchx, NTRL_AT_PATTERN);

	token = matchx.position(0);

	para._task.changeTaskName(userInput.substr(0, token));
	userInput.erase(0, token + 3);

	return;
}

void Parser::processKeywordBefore(string &userInput){
	int token;
	smatch matchx;

	regex_search(userInput, matchx, NTRL_BEFORE_PATTERN);

	token = matchx.position(0);
	cout << "token: " << token << endl;

	para._task.changeTaskName(userInput.substr(0, token));
	userInput.erase(0, token + 6);

	return;
}

void Parser::processKeywordOn(string &userInput){
	int token;
	smatch matchx;

	regex_search(userInput, matchx, NTRL_ON_PATTERN);

	token = matchx.position(0);

	para._task.changeTaskName(userInput.substr(0, token));
	userInput.erase(0, token + 3);

	return;
}

void Parser::processKeywordAfter(string &userInput){
	int token;
	smatch matchx;

	regex_search(userInput, matchx, NTRL_AFTER_PATTERN);

	token = matchx.position(0);

	para._task.changeTaskName(userInput.substr(0, token));
	userInput.erase(0, token + 6);

	return;
}

void Parser::processTime(){
	parserProcess end, start, deadline;
	string startStr = para._task.getTaskStartTime();
	string endStr = para._task.getTaskEndTime();
	string deadlineStr = para._task.getTaskDeadlineTime();
	cout << "DLdate: " << deadlineStr << endl;

	if (startStr != ""){
		start.setNowDT();
		start.processTime(startStr);
		para._task.changeTaskStartTime(start.parserReturnTime());
	}

	if (endStr != ""){
		end.setNowDT();
		end.processTime(endStr);
		para._task.changeTaskEndTime(end.parserReturnTime());
	}

	if (deadlineStr != ""){
		deadline.setNowDT();
		cout << deadlineStr << endl;
		deadline.processTime(deadlineStr);
		para._task.changeTaskDeadlineTime(deadline.parserReturnTime());
	}

	return;
}

void Parser::processBeforeKeywordFrom(string &userInput){
	int index;

	index = userInput.find("from") - 1;
	para._task.changeTaskName(userInput.substr(0, index));
	userInput.erase(0, index + 6);

	return;
}

void Parser::processUpdateKeywords(){  

	string updateint;
	string input = para.getInput();
	string keyword=para.getKeyword();
	
	ostringstream oss;
	oss << para.getUpdateInteger();
	updateint = oss.str();

	if (updateint == input){
		para.processInput("");
		para.processKeyWord("");

	} else if (input == keyword){
		para.processInput("");
	}

	return;
}

void  Parser::processupdateNone (string& userInput, int& process){
	string dldate, dltime;
	
	if (process != 1000){
		para._task.changeTaskName(userInput.substr(0, process - 1));
		userInput.erase(0, process - 1);
		checkStart(dldate, dltime, userInput);
		para._task.changeTaskDeadlineDate(dldate);
		para._task.changeTaskDeadlineTime(dltime);
		processX(userInput);
	} else {
		para._task.changeTaskName(checkingKeywordX(userInput));
	}

	return;
}

void Parser::convertKeywordTime(string& input,string& type){
	if (input != ""&& (para.getKeyword() == "start-date" | para.getKeyword() == "end-date" | para.getKeyword() == "endline-date")){
		parserProcess end;

		end.setNowDT();
		end.processDate(input);
		para.processInput(end.parserReturnDate());

	} else if (input != "" && (para.getKeyword() == "start-time" | para.getKeyword() == "end-time" | para.getKeyword() == "endline-time")){
		parserProcess end;

		end.setNowDT();
		end.processTime(input);
		para.processInput(end.parserReturnTime());
	}

	return;	
}

void Parser::processStartKey(string& eventStartDetails){

	string startDate;
	string startime;
	checkStart(startDate, startime, eventStartDetails);
	para._task.changeTaskStartDate(startDate);
	para._task.changeTaskStartTime(startime);
	processX(eventStartDetails);

	return;
}

void Parser::processEndKey(string&  eventEndDetails){
	string endDate;
	string endTime;
	checkEnd(endDate, endTime, eventEndDetails);
	para._task.changeTaskEndDate(endDate);
	para._task.changeTaskEndTime(endTime);
	processX(eventEndDetails);

	return;
}

int  Parser::findToIndex(string& input){

	smatch matchX;
	int match=0;

	if (regex_search(input, matchX, TO_PATTERN)){
		match = matchX.position(0);
	}

	return match;
}

void Parser::assertCommand(string command){

	assert(command != " ");
	assert(command != "");

	return;
}
	// End of segment: C:\Users\User\Desktop\TaskSotong\main\Parser\Parser.cpp





	/**
	 * origin: C:\Users\User\Desktop\TaskSotong\main\Parser\Parser.h
	 */

#ifndef PARSER_H
#define PARSER_H

#include "paraList.h"
#include "parserProcess.h"

#include<iostream>
#include <string>
#include <regex>


using namespace std;

class Parser{

private:


public:
	enum keywordType { START_END, STARTONLY, ENDONLY, DEADLINE, NONE, BY, AT, AFTER, BEFORE, FROM, TO, ON, FROM_TO, ABST_NIL };


	Parser();
	paraList *parseCommand(string);
	paraList para;
	string checkST(string);
	string checkSD(string);
	string checkingKeywordX(string &);
	keywordType determineKeywords(string);
	void sortCommand(string &);
	void sortDetails(string &);
	void processCommand(string &);
	void processKeywordFrom(string &);
	void processKeywordTo(string &);
	void processKeywordBy(string &);
	void processKeywordAt(string &);
	void processKeywordBefore(string &);
	void processKeywordOn(string &);
	void processKeywordAfter(string &);
	void processBeforeKeywordf(string &);
	void processBeforeKeywordt(string &);
	void processBeforeKeywordb(string &);
	void processX(string);
	void processNum(int&, int&, int&, int&);
	void processDate();
	void processTime();
	void processBeforeKeywordFrom(string &);
	void processUpdateKeywords();
	void processupdateNone(string&, int&);
	void processStartKey(string&);
	void processEndKey(string&);
	void checkStart(string&, string &, string);
	void checkEnd(string&, string &, string);
    void getNoneToken(string, int&, int&, int&);
	void getLocalTime();
	void convertKeywordTime(string&, string&);
	void assertCommand(string);
	int  findToIndex(string&);
};

#endif

	// End of segment: C:\Users\User\Desktop\TaskSotong\main\Parser\Parser.h





	/**
	 * origin: C:\Users\User\Desktop\TaskSotong\main\Parser\parserProcess.cpp
	 */

#include "parserProcess.h"
#include <iostream>
#include <ctime>
#include <atltime.h>
#include <sstream>
#define NDEBUG
#include <assert.h>


	// End of segment: C:\Users\User\Desktop\TaskSotong\main\Parser\parserProcess.cpp





	/**
	 * origin: C:\Users\User\Desktop\TaskSotong\main\Parser\parserProcess.cpp
	 */

void parserProcess::setRawDT(string& rawDate, string& rawTime)
{
	_ParserProcess_LogFile.writeToLogFile(rawDate);
	rawDateStore = rawDate;
	rawTimeStore = rawTime;
}


void parserProcess::setNowDT()
{


	UINT DayOfWeek[] = {
		LOCALE_SDAYNAME7,   // Sunday
		LOCALE_SDAYNAME1,
		LOCALE_SDAYNAME2,
		LOCALE_SDAYNAME3,
		LOCALE_SDAYNAME4,
		LOCALE_SDAYNAME5,
		LOCALE_SDAYNAME6   // Saturday
	};
	TCHAR strWeekday[256];
	CTime time(CTime::GetCurrentTime());   // Initialize CTime with current time
	::GetLocaleInfo(LOCALE_USER_DEFAULT,   // Get string for day of the week from system
		DayOfWeek[time.GetDayOfWeek() - 1],   // Get day of week from CTime
		strWeekday, sizeof(strWeekday) / sizeof(strWeekday[0]));


	time_t t = time.GetTime();   // get time now
	struct tm * now = localtime(&t);

	nowDT.year = (now->tm_year + 1900);
	nowDT.month = (now->tm_mon + 1);
	nowDT.day = now->tm_mday;
	nowDT.hour = now->tm_hour;
	nowDT.min = now->tm_min;
	nowDT.dayName = strWeekday;
	nowDT.dayNameRef = time.GetDayOfWeek() - 2;



}


void parserProcess::processDate(string rawDate)
{

	datekeyWord dateProcess;
	dateProcess = sortDateType(rawDate);

	switch (dateProcess)
	{
	case DAY_NATURALISED:
	{
		natExp exp;
		exp = sortNatExp(rawDate);
		nowDT.isLongMonth = monthDayIndicator(nowDT.month);

		switch (exp)
		{
		case TODAY:
		{
			if (nowDT.isLongMonth)
			{
				addDayCalc(31, 0);
			}
			else
			{
				addDayCalc(30, 0);
			}

			return;
		}
		case YEST:
		{

			if (nowDT.isLongMonth)
			{
				addDayCalc(31, -1);
			}
			else
			{
				addDayCalc(30, -1);
			}


			return;

		}
		case TMR:
		{
			if (nowDT.isLongMonth)
			{
				addDayCalc(31, 1);
			}
			else
			{
				addDayCalc(30, 1);
			}

			return;
		}
		}
	}
	case DAY_NAME:
	{   
		processDateName(rawDate);
		dateNumCalculator(processedDateStore.dayNameRef, nowDT.dayNameRef);

		return;
	}
	case DAY_NUM:
	{

		char c;
		istringstream iss(rawDate);


		iss >> processedDateStore.day;
		iss >> c;
		iss >> processedDateStore.month;
		iss >> c;
		iss >> processedDateStore.year;


		return;
	}



	}




}




parserProcess::datekeyWord parserProcess::sortDateType(string& rawInput)
{
	_ParserProcess_LogFile.writeToLogFile(rawInput);
	if (regex_search(rawInput, DATE_NATURALIZED))
	{
		return DAY_NATURALISED;

	}
	else if (regex_search(rawInput, DATE_NAME))
	{
		return DAY_NAME;

	}
	else if (regex_search(rawInput, DATE_NUM))
	{
		return DAY_NUM;
	}



}




void parserProcess::processDateName(string& input)
{
	dayName day;
	day = sortDayName(input);

	switch (day)
	{
	case(MONDAY) :
	{ 
		processedDateStore.dayNameRef = 0;
		return;
	}
	case(TUESDAY) :
	{   
		processedDateStore.dayNameRef = 1;
		return;
	}
	case(WEDNESDAY) :
	{ 
		processedDateStore.dayNameRef = 2;
		return;

	}
	case(THURSDAY) :
	{  
		processedDateStore.dayNameRef = 3;
		return;
	}
	case(FRIDAY) :
	{ 
		processedDateStore.dayNameRef = 4;
		return;
	}
	case(SATURDAY) :
	{   
		processedDateStore.dayNameRef = 5;
		return;
	}
	case(SUNDAY) :
	{
		processedDateStore.dayNameRef = 6;
		return;
	}






	}
}




//returns the day if strInput corresponds to any of the expressions of said day
parserProcess::dayName  parserProcess::sortDayName(string& strInput)
{
	//assert(strInput != "");

	if (regex_search(strInput, MONDAY_INPUT))
	{
		return  MONDAY;

	}
	else if (regex_search(strInput, TUESDAY_INPUT))
	{

		return  TUESDAY;

	}
	else if (regex_search(strInput, WEDNESDAY_INPUT))
	{
		return  WEDNESDAY;

	}
	else if (regex_search(strInput, THURSDAY_INPUT))
	{
	
		return THURSDAY;

	}
	else if (regex_search(strInput, FRIDAY_INPUT))
	{

		return FRIDAY;

	}
	else if (regex_search(strInput, SATURDAY_INPUT))
	{
		return SATURDAY;

	}
	else if (regex_search(strInput, SUN_INPUT))
	{
		return SUNDAY;
	}





}


bool parserProcess::monthDayIndicator(int& month)
{
	return month % 2;

}

dateStore parserProcess::dateNumCalculator(int& dateNum, int& nowDateNum)
{  

	string error;

	try
	{
		if (dateNum > 31)
		{
			throw error = "Out of bounds day-dateNumCalculator";
		}
		
	}
	catch (string)
	{

		cout << "Exceptation Case:" << error;
	}
	
	
	
	if (monthDayIndicator(nowDT.month) == true) //31st 
	{

		processMonthMoreDays(dateNum, nowDateNum, processedDateStore);


	}
	else //30th 
	{
		processMonthLessDays(dateNum, nowDateNum, processedDateStore);

	}


	return processedDateStore;

}

//process the date for months that have 31 days
void parserProcess::processMonthMoreDays(int& givenDay, int& nowDay, dateStore& storage)
{   
	string error;
	_ParserProcess_LogFile.writeToLogFile(error);
	int diff;

	if (nowDay > givenDay)
	{
		diff = (givenDay - nowDay) + 7;
		addDayCalc(31, diff);
	}
	else if (nowDay < givenDay)
	{
		
		//Exception testing for out of bounds difference.
		try
		{ 
		  diff = (givenDay - nowDay);
		
		  if (diff>8)
		  {
			  throw error="Out of Bounds Diff in Paraprocess";
		  }

		}
		catch (string)
		{
			cout << "Error occured:" <<error;


		}
		
		
		addDayCalc(31, diff);

	}
	else if (nowDay = givenDay)
	{
		processedDateStore.day = nowDT.day;
		processedDateStore.month = nowDT.month;
		processedDateStore.year = nowDT.year;

	}




}



//process the date for months that have 30 days
void parserProcess::processMonthLessDays(int& givenDay, int& nowDay, dateStore& storage)
{
	string error;
	int diff;

	if (nowDay > givenDay)
	{
		diff = (givenDay - nowDay) + 7;
		addDayCalc(30, diff);

	}
	else if (nowDay < givenDay)
	{
		diff = (givenDay - nowDay);
		
		
		try
		{
			diff = (givenDay - nowDay);

			if (diff>8)
			{
				throw error = "Out of Bounds Diff in Paraprocess";
			}

		}
		catch (string)
		{
			cout << "Error occured:" << error;


		}
		
		
		
		
		
		
		
		
		
		addDayCalc(30, diff);

	}
	else if(nowDay == givenDay)
	{
		processedDateStore.day = nowDT.day;
		processedDateStore.month = nowDT.month;
		processedDateStore.year = nowDT.year;

	}






}


void parserProcess::addDayCalc(int daysInMonth, int diff)
{
	if (nowDT.day + diff > daysInMonth)
	{
		processedDateStore.day = (nowDT.day + diff) - daysInMonth;
		if (nowDT.month + 1 < 12)
		{
			processedDateStore.month = nowDT.month + 1;
			processedDateStore.year = nowDT.year;
		}
		else
		{
			processedDateStore.month = 1;
			processedDateStore.year = nowDT.year + 1;

		}
	}
	else
	{
		processedDateStore.day = nowDT.day + diff;
		processedDateStore.month = nowDT.month;
		processedDateStore.year = nowDT.year;


	}
}

parserProcess::natExp parserProcess::sortNatExp(string& natexp)
{

	if (regex_search(natexp, TODAY_INPUT))
	{
		return TODAY;

	}
	else if (regex_search(natexp, TMR_INPUT))
	{
		return TMR;
	}
	else if (regex_search(natexp, YEST_INPUT))
	{

		return YEST;
	}







}

void parserProcess::printProcessed()
{

	cout << processedDateStore.day << ":" << processedDateStore.month << ":" << processedDateStore.year << endl;


}

void parserProcess::printNow()
{


	cout << nowDT.day << ":" << nowDT.month << ":" << nowDT.year << endl;
	cout << nowDT.dayName << "DNF:" << nowDT.dayNameRef;

}


string parserProcess::parserReturnDate()
{
	ostringstream oss;

	oss << processedDateStore.day << "/" << processedDateStore.month << "/" << processedDateStore.year;

	return oss.str();

}


string parserProcess::parserReturnNowTime()
{
	ostringstream oss;
	setNowDT();
	oss << nowDT.day << "/" <<nowDT.month << "/" << nowDT.year;

	return oss.str();

}





void parserProcess::processTime(string timeInput)
{

	timeKeyWord time;
	time = sortTimeKeyWord(timeInput);
	
	clearTimestore();

	switch (time)
	{
	case(AM_PM) :
	{
		cout << "ampm" << endl;
		processTimeAmPm(timeInput);

		return;

	}
	case(OCLOCK) :
	{

		processTimeNatExp(timeInput);

		return;
	}
	case(SHORT_AM_PM) :
	{

		processTimeShortAmPm(timeInput);
		return;

	}
	case(NIL) :
	{
		processTimeNil(timeInput);
		return;

	}




	}

}


parserProcess::timeKeyWord  parserProcess::sortTimeKeyWord(string& timeInput)
{



	if (regex_search(timeInput, AMPM_INPUT))
	{
		return AM_PM;

	}
	else if (regex_search(timeInput, OCLOCK_INPUT))
	{

		return OCLOCK;
	}
	else if (regex_search(timeInput, AMPM_SHORT_INPUT))
	{

		return SHORT_AM_PM;
	}
	else if (regex_search(timeInput, NIL_INPUT))
	{

		return NIL;

	}


}

void parserProcess::processTimeAmPm(string& timeInput)
{
	istringstream iss(timeInput);
	int hours, mins;
	char sym, status;
	iss >> hours;
	iss >> sym;
	iss >> mins;
	iss >> status;
	covertTime(status, hours);

	processedtimeStore.min = mins;
	processedtimeStore.hours = hours;

	return;


}
void parserProcess::processTimeNil(string& timeInput)
{   


	if (!regex_search(timeInput,SYM_INPUT))
	{
		processedtimeStore.nilstore = timeInput;
		
	}
	else
	{ 


	istringstream iss(timeInput);
	int hours, mins;
	char sym, status;
	iss >> hours;
	iss >> sym;
	iss >> mins;
	iss >> status;

	processedtimeStore.min = mins;
	processedtimeStore.hours = hours;
    }

	return;



}

void parserProcess::processTimeNatExp(string& timeInput)
{
	istringstream iss(timeInput);
	int hours;
	char c;
	iss >> hours;

	processedtimeStore.hours = hours;
	processedtimeStore.min = 0;
}




void parserProcess::processTimeShortAmPm(string& timeInput)
{

	istringstream iss(timeInput);
	int hours;
	char c;
	iss >> hours;
	iss >> c;

	covertTime(c, hours);
	processedtimeStore.min = 0;
	processedtimeStore.hours = hours;

	return;

}


void parserProcess::covertTime(char& status, int& hour)
{
	if (status == 'p' | status == 'P')
	{
		hour = hour + 12;

	}
	return;

}


string parserProcess::parserReturnTime()
{
	if (processedtimeStore.nilstore!="")
	{

		return processedtimeStore.nilstore;

	}
	else
	{

		ostringstream oss;

		if (processedtimeStore.min < 10)
		{
			oss << processedtimeStore.hours << ":0" << processedtimeStore.min;
		}
		else
		{
			oss << processedtimeStore.hours << ":" << processedtimeStore.min;

		}



		return oss.str();
	}




}

void parserProcess::clearTimestore()
{

	processedtimeStore.hours = 0;
	processedtimeStore.min = 0;
	processedtimeStore.nilstore = "";
	processedtimeStore.timeStatus = "";


	return;


}
	// End of segment: C:\Users\User\Desktop\TaskSotong\main\Parser\parserProcess.cpp





	/**
	 * origin: C:\Users\User\Desktop\TaskSotong\main\Parser\parserProcess.h
	 */

#ifndef PARSERPROCESS_H
#define PARSERPROCESS_H

#include <vector>
#include <iostream>
#include <string>
#include <regex>
#include <ctime>
#include <atltime.h>
#include <sstream> 
#include "..\Common\Task.h"
#include "..\TaskSotong_Log\Log.h"


using namespace std;




struct dateStore{

	string dayName;
	int dayNameRef;
	int additionDay;
    int day;
	int month;
	int year;
};

struct timeStore
{

	string nilstore;
	string timeStatus;
	int min;
	int hours;

};


struct nowDTstore{

	string dayName;
	bool isLongMonth;
	int day;
	int month;
	int year;
	int dayNameRef;
	int min;
	int hour;
	
};




class parserProcess{

private:
	string rawDateStore;
	string rawTimeStore;
	dateStore processedDateStore;
	timeStore processedtimeStore;
	nowDTstore nowDT;

public:

	enum dayName { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY };
	enum Time { JAN, FEB, MAR, APR, JUN, JUL, AUG, SEPT, OCT, NOV, DEC };
	enum datekeyWord { DAY_NAME, DAY_NUM, DAY_NATURALISED };
	enum timeKeyWord { SHORT_AM_PM, AM_PM, NIL, OCLOCK };
	enum natExp{ TODAY, YEST, TMR };
	bool addition(string);
	bool subtraction(string);
	void processDate(string);
	void processTime(string);
	void processCommandType();	
	void processDateName(string&);
	void processDateNum(string&);
	void processTimeAmPm(string&);
	void processTimeNil(string&);
	void processTimeNatExp(string&);
	void processTimeShortAmPm(string&);
	void processMonthMoreDays(int&, int&, dateStore&);
	void processMonthLessDays(int&, int&, dateStore&);
	void setNowDT();
	void setRawDT(string&, string&);
	bool monthDayIndicator(int&); //true for 31 days, false for 30 days 
	void addDayCalc(int, int);
	void printProcessed();
	void printNow();
	void covertTime(char&, int&);
	void clearTimestore();
	datekeyWord sortDateType(string&);
	dayName sortDayName(string&);
	dateStore dateNumCalculator(int&, int&);
	timeKeyWord sortTimeKeyWord(string&);
	natExp sortNatExp(string&);
	string parserReturnDate();
	string parserReturnTime();
	string parserReturnNowTime();

	Log _ParserProcess_LogFile;
	
};

#endif

	// End of segment: C:\Users\User\Desktop\TaskSotong\main\Parser\parserProcess.h





	/**
	 * origin: C:\Users\User\Desktop\TaskSotong\main\Parser_Testing\Parser_Testing.cpp
	 */

#include "stdafx.h"
#include "CppUnitTest.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;
//Testing StartDT, EndDT, Priority Tests
namespace Parser_Testing
{		
	TEST_CLASS(newParserTest)
	{
	public:
		
		TEST_METHOD(taskNametest)
		{
			string userInput = "add andy";
			string output;
			string expectedOutput="andy";
		
			Parser a;

			a.parseCommand(userInput);

			output = a.para._task.getTaskName();
			Assert::AreEqual(output,expectedOutput);

		}
		TEST_METHOD(taskDeadlineTimetest)
		{
			string userInput = "add CS Homework before 6pm";
			string output;
			string expectedOutput = "18:00";

			Parser a;

			a.parseCommand(userInput);

			output = a.para._task.getTaskDeadlineTime();
			Assert::AreEqual(output, expectedOutput);

		}
		TEST_METHOD(taskNametest2)
		{
			string userInput = "add# day after tmr";
			string output;
			string expectedOutput = "day after tmr";

			Parser a;
			 
			a.parseCommand(userInput);

			output = a.para._task.getTaskName();
			Assert::AreEqual(output, expectedOutput);

		}
		TEST_METHOD(taskStartEndTimetest)
		{
			string userInput = "add happytreefriends from tues 4:00pm to weds 8pm";
			string output;
			string expectedOutput1 = "16:00";
			string expectedOutput2 = "20:00";

			Parser a;

			a.parseCommand(userInput);

			output = a.para._task.getTaskStartTime();
			Assert::AreEqual(output, expectedOutput1);

			output = a.para._task.getTaskEndTime();
			Assert::AreEqual(output, expectedOutput2);
		}
		
		TEST_METHOD(nullStringNametest)
		{
			string userInput = "add ";
			string output;
			string expectedOutput = "";

			Parser testParser;

			testParser.parseCommand(userInput);

			output = testParser.para._task.getTaskName();
			Assert::AreEqual(output, expectedOutput);
		}
	// End of segment: C:\Users\User\Desktop\TaskSotong\main\Parser_Testing\Parser_Testing.cpp





